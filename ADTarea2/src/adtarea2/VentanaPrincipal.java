/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adtarea2;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author AntDVD
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        conexionBD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPie = new javax.swing.JPanel();
        jLabelConexion = new javax.swing.JLabel();
        jLabelAutor = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuInicio = new javax.swing.JMenu();
        jMenuItemSalir = new javax.swing.JMenuItem();
        jMenuTablaLibros = new javax.swing.JMenu();
        jMenuItemCrearTablaLibros = new javax.swing.JMenuItem();
        jMenuItemLlenarTablaLibros = new javax.swing.JMenuItem();
        jMenuItemVerTablaLibros = new javax.swing.JMenuItem();
        jMenuUsuarios = new javax.swing.JMenu();
        jMenuItemCrearTablaUsuarios = new javax.swing.JMenuItem();
        jMenuItemLlenarTablaUsuarios = new javax.swing.JMenuItem();
        jMenuItemVerTablaUsuarios = new javax.swing.JMenuItem();
        jMenUEjemplo = new javax.swing.JMenu();
        jMenuItemAutomatizarTodo = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelAutor.setText("David Jiménez Riscardo - 2019");

        javax.swing.GroupLayout jPanelPieLayout = new javax.swing.GroupLayout(jPanelPie);
        jPanelPie.setLayout(jPanelPieLayout);
        jPanelPieLayout.setHorizontalGroup(
            jPanelPieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPieLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addComponent(jLabelAutor)
                .addContainerGap())
        );
        jPanelPieLayout.setVerticalGroup(
            jPanelPieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelPieLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelPieLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelAutor, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanelPie, java.awt.BorderLayout.PAGE_END);

        jMenuInicio.setText("Inicio");

        jMenuItemSalir.setText("Salir");
        jMenuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalirActionPerformed(evt);
            }
        });
        jMenuInicio.add(jMenuItemSalir);

        jMenuBar.add(jMenuInicio);

        jMenuTablaLibros.setText("Tabla Libros");

        jMenuItemCrearTablaLibros.setText("Crear tabla");
        jMenuItemCrearTablaLibros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCrearTablaLibrosActionPerformed(evt);
            }
        });
        jMenuTablaLibros.add(jMenuItemCrearTablaLibros);

        jMenuItemLlenarTablaLibros.setText("Rellenar tabla");
        jMenuItemLlenarTablaLibros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLlenarTablaLibrosActionPerformed(evt);
            }
        });
        jMenuTablaLibros.add(jMenuItemLlenarTablaLibros);

        jMenuItemVerTablaLibros.setText("Visualizar tabla");
        jMenuItemVerTablaLibros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerTablaLibrosActionPerformed(evt);
            }
        });
        jMenuTablaLibros.add(jMenuItemVerTablaLibros);

        jMenuBar.add(jMenuTablaLibros);

        jMenuUsuarios.setText("Tabla Socios");

        jMenuItemCrearTablaUsuarios.setText("Crear tabla");
        jMenuItemCrearTablaUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCrearTablaUsuariosActionPerformed(evt);
            }
        });
        jMenuUsuarios.add(jMenuItemCrearTablaUsuarios);

        jMenuItemLlenarTablaUsuarios.setText("Rellenar tabla");
        jMenuItemLlenarTablaUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemLlenarTablaUsuariosActionPerformed(evt);
            }
        });
        jMenuUsuarios.add(jMenuItemLlenarTablaUsuarios);

        jMenuItemVerTablaUsuarios.setText("Visualizar tabla");
        jMenuItemVerTablaUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerTablaUsuariosActionPerformed(evt);
            }
        });
        jMenuUsuarios.add(jMenuItemVerTablaUsuarios);

        jMenuBar.add(jMenuUsuarios);

        jMenUEjemplo.setText("Ejemplo");

        jMenuItemAutomatizarTodo.setText("Automatizar todo");
        jMenuItemAutomatizarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAutomatizarTodoActionPerformed(evt);
            }
        });
        jMenUEjemplo.add(jMenuItemAutomatizarTodo);

        jMenuBar.add(jMenUEjemplo);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemSalirActionPerformed

    private void jMenuItemCrearTablaLibrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCrearTablaLibrosActionPerformed
        
        try{
        
            Connection conn = conexionBD();
            
            if(conn != null){
                
                DatabaseMetaData dbm = conn.getMetaData();

                ResultSet rs = dbm.getTables(null, null, "libros", null); 

                if (rs.next()) { 

                    //La tabla existe procedemos a eliminarla en primera instancia
                    String sql = "DROP TABLE libros";

                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.execute();
                    pstmt.close();
                    
                    //A continuación la creamos
                    sql = "CREATE TABLE libros(id Counter Primary Key, isbn TEXT(17), titulo TEXT(100), autor TEXT(100), num_ejemplares INTEGER, editorial TEXT(100), num_paginas INTEGER)";

                    pstmt = conn.prepareStatement(sql);

                    pstmt.execute();
                    pstmt.close();
                    
                }else {

                    //La tabla no existe, procedemos a crearla
                    String sql = "CREATE TABLE libros(id Counter Primary Key, isbn TEXT(17), titulo TEXT(100), autor TEXT(100), num_ejemplares INTEGER, editorial TEXT(100), num_paginas INTEGER)";

                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.execute();
                    pstmt.close();

                }
                
                JOptionPane.showMessageDialog(null, "Tabla creada correctamente.");
 
            }
            
            conn.close();
            
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_jMenuItemCrearTablaLibrosActionPerformed

    private void jMenuItemCrearTablaUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCrearTablaUsuariosActionPerformed
        try{
        
            Connection conn = conexionBD();
            
            if(conn != null){
                
                DatabaseMetaData dbm = conn.getMetaData();

                ResultSet rs = dbm.getTables(null, null, "socios", null); 

                if (rs.next()) { 

                    //La tabla existe procedemos a eliminarla en primera instancia
                    String sql = "DROP TABLE socios";

                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.execute();
                    pstmt.close();
                    
                    //A continuación la creamos
                    sql = "CREATE TABLE socios(id Counter Primary Key, dni TEXT(9), nombre TEXT(50), apellidos TEXT(50), edad INTEGER, direccion TEXT(150), telefono TEXT(12))";

                    pstmt = conn.prepareStatement(sql);

                    pstmt.execute();
                    pstmt.close();
                    
                }else {

                    //La tabla no existe, procedemos a crearla
                    String sql = "CREATE TABLE socios(id Counter Primary Key, dni TEXT(9), nombre TEXT(50), apellidos TEXT(50), edad INTEGER, direccion TEXT(150), telefono TEXT(12))";

                    PreparedStatement pstmt = conn.prepareStatement(sql);

                    pstmt.execute();
                    pstmt.close();

                }
                
                JOptionPane.showMessageDialog(null, "Tabla creada correctamente.");
 
            }
            
            conn.close();
            
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_jMenuItemCrearTablaUsuariosActionPerformed

    private void jMenuItemLlenarTablaLibrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLlenarTablaLibrosActionPerformed
        try{
        
            Connection conn = conexionBD();
            
            if(conn != null){
                
                DatabaseMetaData dbm = conn.getMetaData();

                ResultSet rs = dbm.getTables(null, null, "libros", null); 

                if (rs.next()) { 
                    
                    String isbn;
                    String titulo;
                    String autor;
                    int num_ejemplares;
                    String editorial;
                    int num_paginas;
                    
                    String sql;
                    PreparedStatement pstmt;
                    
                    Libro arrayObjetos[] = new Libro[2];
                    arrayObjetos[0] = new Libro("978-84-98-41451-6", "El mundo de Sofia", "JOSTEIN GAARDER", 100, "SIRUELA", 656);
                    arrayObjetos[1] = new Libro("978-84-08-16318-3 ", "El asesinato de Socrates", "Marcos Chicot", 200, "Editorial Planeta", 768);
                    
                    for (int i=0;i<arrayObjetos.length;i++){
                        
                        isbn = arrayObjetos[i].getIsbn();
                        titulo = arrayObjetos[i].getTitulo();
                        autor = arrayObjetos[i].getAutor();
                        num_ejemplares = arrayObjetos[i].getNum_ejemplares();
                        editorial = arrayObjetos[i].getEditorial();
                        num_paginas = arrayObjetos[i].getNum_paginas();
                        
                        sql = "INSERT into libros(isbn, titulo, autor, num_ejemplares, editorial, num_paginas) values('"+isbn+"', '"+titulo+"', '"+autor+"', '"+num_ejemplares+"', '"+editorial+"', '"+num_paginas+"')";
                        pstmt = conn.prepareStatement(sql);
                        pstmt.executeUpdate();
                        pstmt.close();
                    }
                    
                    JOptionPane.showMessageDialog(null, "Registros insertados correctamente.");
                    
                }else {
                    
                    JOptionPane.showMessageDialog(null, "Imposible ingresar datos. La tabla NO EXISTE, debe de crearla primero.");
                }

            }
            
            conn.close();
            
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_jMenuItemLlenarTablaLibrosActionPerformed

    private void jMenuItemLlenarTablaUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemLlenarTablaUsuariosActionPerformed
        try{
        
            Connection conn = conexionBD();
            
            if(conn != null){
                
                DatabaseMetaData dbm = conn.getMetaData();

                ResultSet rs = dbm.getTables(null, null, "socios", null); 

                if (rs.next()) { 
                    
                    String dni;
                    String nombre;
                    String apellidos;
                    int edad;
                    String direccion;
                    String telefono;
                    
                    String sql;
                    PreparedStatement pstmt;
                    
                    Usuario arrayObjetos[] = new Usuario[2];
                    arrayObjetos[0] = new Usuario("48882828P", "David", "Jimenez Riscardo", 42, "C/Batalla de San Quintin num 6", "+34618882196");
                    arrayObjetos[1] = new Usuario("48957762P", "Valme", "Cotan Gomez", 36, "C/Batalla de San Quintin num 6", "+34696552545");
                    
                    for (int i=0;i<arrayObjetos.length;i++){
                        
                        dni = arrayObjetos[i].getDni();
                        nombre = arrayObjetos[i].getNombre();
                        apellidos = arrayObjetos[i].getApellidos();
                        edad = arrayObjetos[i].getEdad();
                        direccion = arrayObjetos[i].getDireccion();
                        telefono = arrayObjetos[i].getTelefono();
                        
                        sql = "INSERT into socios(dni, nombre, apellidos, edad, direccion, telefono) values('"+dni+"', '"+nombre+"', '"+apellidos+"', '"+edad+"', '"+direccion+"', '"+telefono+"')";
                        pstmt = conn.prepareStatement(sql);
                        pstmt.executeUpdate();
                        pstmt.close();
                    }
                    
                    JOptionPane.showMessageDialog(null, "Registros insertados correctamente.");
                    
                }else {
                    
                    JOptionPane.showMessageDialog(null, "Imposible ingresar datos. La tabla NO EXISTE, debe de crearla primero.");
                }

            }
            
            conn.close();
            
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        }
    }//GEN-LAST:event_jMenuItemLlenarTablaUsuariosActionPerformed

    private void jMenuItemVerTablaLibrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerTablaLibrosActionPerformed
        
        try{
        
            Connection conn = conexionBD();

            if(conn != null){

                DatabaseMetaData dbm = conn.getMetaData();

                ResultSet rs = dbm.getTables(null, null, "socios", null); 

                if (rs.next()) { 

                    VentanaLibros vl = new VentanaLibros();
                    vl.setVisible(true);
                    this.setVisible(false);
                }else {

                    JOptionPane.showMessageDialog(null, "La tabla no existe. Debe de crearla primero.");
                }    

            }
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        }
        
        
    }//GEN-LAST:event_jMenuItemVerTablaLibrosActionPerformed

    private void jMenuItemVerTablaUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerTablaUsuariosActionPerformed
        
        try{
        
            Connection conn = conexionBD();

            if(conn != null){

                DatabaseMetaData dbm = conn.getMetaData();

                ResultSet rs = dbm.getTables(null, null, "socios", null); 

                if (rs.next()) { 

                    VentanaSocios vs = new VentanaSocios();
                    vs.setVisible(true);
                    this.setVisible(false);
                }else {

                    JOptionPane.showMessageDialog(null, "La tabla no existe. Debe de crearla primero.");
                }    

            }
        }catch(SQLException e){
            
            System.out.println("SQL Exception: "+ e.toString());
        }
        
    }//GEN-LAST:event_jMenuItemVerTablaUsuariosActionPerformed

    private void jMenuItemAutomatizarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAutomatizarTodoActionPerformed
         VentanaAutomatizarTodo vat = new VentanaAutomatizarTodo();
         vat.setVisible(true);
         this.setVisible(false);
    }//GEN-LAST:event_jMenuItemAutomatizarTodoActionPerformed

    private Connection conexionBD(){
        
        try {
            // Obtener la conexión
            Connection conn=DriverManager.getConnection("jdbc:ucanaccess://Bibliooteca.accdb");
            
            if(conn != null){
                
                jLabelConexion.setText("Conexión ESTABLECIDA con la Base de Datos");  
                
                return conn;
                
            }        
            
        } catch (SQLException e) {
             System.out.println("SQL Exception: "+ e.toString());
             jLabelConexion.setText("Conexión NO ESTABLECIDA con la Base de Datos");        
        } 
         return null;              
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAutor;
    private javax.swing.JLabel jLabelConexion;
    private javax.swing.JMenu jMenUEjemplo;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuInicio;
    private javax.swing.JMenuItem jMenuItemAutomatizarTodo;
    private javax.swing.JMenuItem jMenuItemCrearTablaLibros;
    private javax.swing.JMenuItem jMenuItemCrearTablaUsuarios;
    private javax.swing.JMenuItem jMenuItemLlenarTablaLibros;
    private javax.swing.JMenuItem jMenuItemLlenarTablaUsuarios;
    private javax.swing.JMenuItem jMenuItemSalir;
    private javax.swing.JMenuItem jMenuItemVerTablaLibros;
    private javax.swing.JMenuItem jMenuItemVerTablaUsuarios;
    private javax.swing.JMenu jMenuTablaLibros;
    private javax.swing.JMenu jMenuUsuarios;
    private javax.swing.JPanel jPanelPie;
    // End of variables declaration//GEN-END:variables
}
